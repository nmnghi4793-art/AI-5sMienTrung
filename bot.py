# bot.py
import os
import re
import json
import hashlib
from datetime import datetime, date, time as dtime
from zoneinfo import ZoneInfo

import pandas as pd
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ========= C·∫§U H√åNH =========
EXCEL_PATH = "danh_sach_nv_theo_id_kho.xlsx"  # Excel: c·ªôt id_kho, ten_kho
HASH_DB_PATH = "hashes.json"                  # l∆∞u hash ·∫£nh (ph√°t hi·ªán tr√πng)
SUBMIT_DB_PATH = "submissions.json"           # l∆∞u ID ƒë√£ n·ªôp theo ng√†y
TZ = ZoneInfo("Asia/Ho_Chi_Minh")             # m√∫i gi·ªù VN
REPORT_HOUR = 21                              # 21:00 h·∫±ng ng√†y
# ENV b·∫Øt bu·ªôc: BOT_TOKEN
# ENV tu·ª≥ ch·ªçn: REPORT_CHAT_IDS="-100111,-100222"

# ========= JSON UTILS =========
def _load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path: str, data):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def load_hash_db():
    return _load_json(HASH_DB_PATH, {"items": []})

def save_hash_db(db):
    _save_json(HASH_DB_PATH, db)

def load_submit_db():
    return _load_json(SUBMIT_DB_PATH, {})  # { "YYYY-MM-DD": ["id1","id2",...] }

def save_submit_db(db):
    _save_json(SUBMIT_DB_PATH, db)

# ========= KHO MAP =========
def load_kho_map():
    df = pd.read_excel(EXCEL_PATH)
    cols = {c.lower().strip(): c for c in df.columns}
    if "id_kho" not in cols or "ten_kho" not in cols:
        raise RuntimeError("Excel ph·∫£i c√≥ c·ªôt 'id_kho' v√† 'ten_kho'")
    id_col = cols["id_kho"]; ten_col = cols["ten_kho"]
    df = df[[id_col, ten_col]].dropna()
    df[id_col] = df[id_col].astype(str).str.strip()
    df[ten_col] = df[ten_col].astype(str).str.strip()
    return dict(zip(df[id_col], df[ten_col]))

# ========= PARSE TEXT =========
ID_RX = re.compile(r"(\d{1,10})")
DATE_RX = re.compile(r"(?:ng√†y|date|ngay)\s*[:\-]?\s*(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2,4})", re.IGNORECASE)

def parse_text_for_id_and_date(text: str):
    """C√≥ ID l√† ƒë∆∞·ª£c; ng√†y (tu·ª≥ ch·ªçn) 'Ng√†y: dd/mm/yyyy'."""
    _id = None
    _date = date.today()
    if not text:
        return None, _date

    m_id = ID_RX.search(text)
    if m_id:
        _id = m_id.group(1)

    m_d = DATE_RX.search(text)
    if m_d:
        d, m, y = m_d.groups()
        d, m, y = int(d), int(m), int(y)
        if y < 100: y += 2000
        try:
            _date = date(y, m, d)
        except Exception:
            _date = date.today()

    return _id, _date

# ========= ·∫¢NH & HASH =========
async def get_file_bytes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bytes:
    photo = update.message.photo[-1]  # ·∫£nh l·ªõn nh·∫•t
    tg_file = await context.bot.get_file(photo.file_id)
    b = await tg_file.download_as_bytearray()
    return bytes(b)

def hash_bytes(b: bytes) -> str:
    return hashlib.md5(b).hexdigest()  # ph√°t hi·ªán tr√πng 100% file

def find_duplicates(hash_db, h: str):
    """Tr·∫£ v·ªÅ t·∫•t c·∫£ b·∫£n ghi c√≥ c√πng hash (ƒë·ªÉ li·ªát k√™ l·ªãch s·ª≠ tr√πng)."""
    return [item for item in hash_db["items"] if item.get("hash") == h]

def add_hash_record(hash_db, h: str, info: dict):
    # info: { "ts": "...", "chat_id": ..., "user_id": ..., "id_kho": ..., "date": "YYYY-MM-DD" }
    hash_db["items"].append({"hash": h, **info})

# ========= SUBMISSION =========
def mark_submitted(submit_db, id_kho: str, d: date):
    key = d.isoformat()
    lst = submit_db.get(key, [])
    if id_kho not in lst:
        lst.append(id_kho)
    submit_db[key] = lst

# ========= HANDLERS =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚úÖ Bot s·∫µn s√†ng!\n\n"
        "*C√∫ ph√°p linh ho·∫°t* (ch·ªâ c·∫ßn *c√≥ ID* trong caption):\n"
        "`<ID_KHO> - <T√™n kho>`\n"
        "`Ng√†y: dd/mm/yyyy` *(tu·ª≥ ch·ªçn)*\n\n"
        "‚û°Ô∏è G·ª≠i *·∫£nh k√®m caption* ch·ª©a ID (v√† ng√†y n·∫øu mu·ªën).\n"
        "V√≠ d·ª•: `12345 - Kho ABC\\nNg√†y: 11/08/2025`"
    )
    await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, context)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    id_kho, d = parse_text_for_id_and_date(text)
    kho_map = context.bot_data["kho_map"]

    if not id_kho:
        if "ng√†y" in text.lower() or any(ch.isdigit() for ch in text):
            await update.message.reply_text(
                "‚ö†Ô∏è C√∫ ph√°p ch∆∞a r√µ ID. Vui l√≤ng *g·ª≠i ·∫£nh k√®m caption c√≥ ID kho*. V√≠ d·ª•:\n"
                "`12345 - Kho ABC\\nNg√†y: 11/08/2025`",
                parse_mode=ParseMode.MARKDOWN
            )
        return

    if id_kho not in kho_map:
        await update.message.reply_text(
            f"‚ùå ID `{id_kho}` *kh√¥ng c√≥* trong danh s√°ch. Ki·ªÉm tra l·∫°i!",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    await update.message.reply_text(
        f"‚úÖ ƒê√£ nh·∫≠n ID `{id_kho}` ({kho_map[id_kho]}). "
        f"Vui l√≤ng *g·ª≠i ·∫£nh k√®m caption n√†y* ƒë·ªÉ x√°c nh·∫≠n.",
        parse_mode=ParseMode.MARKDOWN
    )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    caption = (msg.caption or "").strip()
    id_kho, d = parse_text_for_id_and_date(caption)
    kho_map = context.bot_data["kho_map"]

    if not id_kho:
        await msg.reply_text(
            "‚ö†Ô∏è *Thi·∫øu ID kho.* H√£y g·ª≠i *·∫£nh k√®m caption* ch·ª©a ID. V√≠ d·ª•:\n"
            "`12345 - Kho ABC\\nNg√†y: 11/08/2025`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    if id_kho not in kho_map:
        await msg.reply_text(
            f"‚ùå ID `{id_kho}` *kh√¥ng c√≥* trong danh s√°ch Excel. Ki·ªÉm tra l·∫°i!",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # t·∫£i bytes ·∫£nh & hash
    b = await get_file_bytes(update, context)
    h = hash_bytes(b)

    # ki·ªÉm tra ·∫£nh tr√πng ‚Üí li·ªát k√™ to√†n b·ªô l·ªãch s·ª≠
    hash_db = load_hash_db()
    dups = find_duplicates(hash_db, h)
    if dups:
        lines = []
        for item in dups:
            old_date = item.get("date", "?")
            try:
                pretty = datetime.fromisoformat(old_date).strftime("%d/%m/%Y")
            except Exception:
                pretty = old_date
            old_id = item.get("id_kho", "?")
            old_name = kho_map.get(old_id, "(kh√¥ng r√µ)")
            lines.append(f"- Ng√†y *{pretty}*: `{old_id}` ‚Äî {old_name}")
        MAX_SHOW = 10
        shown = lines[:MAX_SHOW]
        tail = f"\n‚Ä¶ v√† {len(lines)-MAX_SHOW} l·∫ßn tr√πng kh√°c." if len(lines) > MAX_SHOW else ""
        await msg.reply_text(
            "‚ö†Ô∏è ·∫¢nh *tr√πng* v·ªõi ·∫£nh ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√¢y:\n" + "\n".join(shown) + tail +
            "\n\n‚û°Ô∏è Vui l√≤ng ch·ª•p *·∫£nh m·ªõi* kh√°c ƒë·ªÉ tr√°nh tr√πng l·∫∑p.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # ghi nh·∫≠n n·ªôp
    submit_db = load_submit_db()
    mark_submitted(submit_db, id_kho, d)
    save_submit_db(submit_db)

    # l∆∞u hash (ƒë·ªÉ ph√°t hi·ªán tr√πng c√°c l·∫ßn sau)
    info = {
        "ts": datetime.now(TZ).isoformat(timespec="seconds"),
        "chat_id": msg.chat_id,
        "user_id": msg.from_user.id,
        "id_kho": id_kho,
        "date": d.isoformat()
    }
    add_hash_record(hash_db, h, info)
    save_hash_db(hash_db)

    await msg.reply_text(
        f"‚úÖ ƒê√£ ghi nh·∫≠n ·∫£nh cho *{kho_map[id_kho]}* (ID `{id_kho}`) - Ng√†y *{d.strftime('%d/%m/%Y')}*.",
        parse_mode=ParseMode.MARKDOWN
    )

# ========= B√ÅO C√ÅO 21:00 =========
def get_missing_ids_for_day(kho_map, submit_db, d: date):
    submitted = set(submit_db.get(d.isoformat(), []))
    all_ids = set(kho_map.keys())
    return sorted(all_ids - submitted)

async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    chat_ids_env = os.getenv("REPORT_CHAT_IDS", "").strip()
    if not chat_ids_env:
        return
    chat_ids = [int(x.strip()) for x in chat_ids_env.split(",") if x.strip()]

    kho_map = context.bot_data["kho_map"]
    submit_db = load_submit_db()
    today = datetime.now(TZ).date()

    missing = get_missing_ids_for_day(kho_map, submit_db, today)
    if not missing:
        text = f"üì¢ *B√ÅO C√ÅO {today.strftime('%d/%m/%Y')}*\nT·∫•t c·∫£ kho ƒë√£ n·ªôp ƒë·ªß ‚úÖ"
    else:
        lines = [f"- `{mid}`: {kho_map[mid]}" for mid in missing]
        text = (
            f"üì¢ *B√ÅO C√ÅO {today.strftime('%d/%m/%Y')}*\n"
            f"Ch∆∞a nh·∫≠n ·∫£nh t·ª´ {len(missing)} kho:\n" + "\n".join(lines)
        )

    for cid in chat_ids:
        try:
            await context.bot.send_message(cid, text, parse_mode=ParseMode.MARKDOWN)
        except Exception:
            pass

# ========= MAIN =========
def build_app() -> Application:
    token = os.getenv("BOT_TOKEN", "").strip()
    if not token:
        raise RuntimeError("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()
    app.bot_data["kho_map"] = load_kho_map()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.job_queue.run_daily(
        send_daily_report,
        time=dtime(hour=REPORT_HOUR, minute=0, tzinfo=TZ),
        name="daily_report_21h"
    )
    return app

def main():
    app = build_app()
    print("Bot is running...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
